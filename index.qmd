---
title: "Nuclear Energy Promises a Bright Future"
subtitle: "But Behind its Reactor Doors Hides Impending Disaster"
theme: cyborg
description: "Crafting a nuclear disaster infographic with R and Canva"
author: "Kaiju Morquecho"
warning: false
execute: 
  echo: false
format:
  html:
    toc: true
    toc-title: "Contents"
    code-fold: true
    code-summary: "Show the code"
    include-in-header:
      - text: |
          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
          <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Rubik+Glitch&family=Smooch+Sans:wght@100..900&family=Sofia+Sans+Condensed:ital,wght@0,1..1000;1,1..1000&display=swap" rel="stylesheet">
          <style>
            body {
              font-family: 'Smooch Sans', sans-serif;
            }
            h1, h2, h3, h4, h5, h6 {
              font-family: 'Bebas Neue', sans-serif;
            }
            p {
              font-family: 'Smooch Sans', sans-serif;
            }
          </style>
editor_options: 
  chunk_output_type: inline
---

[I’ve been learning about nuclear disasters since I was 7, an interest I inherited from my brother. I remember the day he showed me what Chernobyl was and the many hours I spent that day googling pictures and facts about the accident. In 2011 we stayed up late, watching the news coverage of the Fukushima nuclear accident in Japan. It had been predicted that a meltdown was unavoidable and a hydrogen explosion imminent and we watched as the first explosion occurred. I’m fascinated with nuclear energy because as humans we believe that we can tame the fission chain reaction, yet atomic energy has proven to us time and again that as long as humans are the ones running the show, accidents are only a matter of time. I figured I'd combine this interest of mine with my newly learned data viz skills to create an infographic. ]{style="springgreen"}

#### **The Question**

The main question I explore in this data viz project is if the benefits and advantages of nuclear energy are worth the catastrophic consequences of nuclear accidents. Although nuclear accidents are statistically rare, the potential for human error in operating nuclear power plants makes them a question of when, not if.

#### **The Data** 

The data comes from 2 different sources

-   Natural Environmental Research Council's Environmental Information Data Centre

    -   [Water Chemistry of Seven Lakes in Belarus and Ukraine 2014 - 2016](https://www.data.gov.uk/dataset/ee542417-0491-4691-8982-45e58cb525bc/water-chemistry-of-seven-lakes-in-belarus-and-ukraine-2014-to-2016), accessed through the data.gov.uk Find open data page.

    -   [Spatial Datasets of Radionuclide Contamination in the Ukrainian Chernobyl Exclusion Zone](https://catalogue.ceh.ac.uk/documents/782ec845-2135-4698-8881-b38823e533bf), accessed through the data.gov.uk Find open data page.

-   Kaggle

    -   [Major Nuclear Plant Accidents (1957 - 2011)](https://www.kaggle.com/code/ahmadwaleed1/nuclear-plant-incidents-deep-analysis/notebook), accessed via Kaggle.

#### **Additional Data** 

-   [Center for Disease Control and Prevention](https://wwwn.cdc.gov/TSP/ToxFAQs/ToxFAQsDetails.aspx?faqid=576&toxid=107#:~:text=EPA%20has%20set%20an%20average,will%20not%20exceed%204%20millirem.)

-   [International Atomic Energy Agency](https://www.iaea.org/resources/databases/international-nuclear-and-radiological-event-scale)

-   [World Nuclear Association](https://world-nuclear.org/information-library/safety-and-security/safety-of-plants/chernobyl-accident)

#### **The Goal**

In the infographic below I propose that despite the promise of clean energy and the relatively low number of nuclear accidents, nuclear energy is not worth the gamble. I dive into the details of the Chernobyl nuclear accident to show that not only is the radioactive contamination far-reaching, but also ever-lasting.

I present data on the water chemistry of three lakes near the Chernobyl Nuclear Power Plant, normalized by the EPA’s annual water contamination limit for Cs-137, to illustrate the extent of radionuclide dispersion. These water samples, collected between 2014 and 2016—more than 20 years after the disaster—underscore the persistent legacy of nuclear contamination. I also analyze data on radiation exposure doses and rates near the NPP one year after the accident, highlighting the immediate and extreme danger of nuclear energy gone wrong.

#### **The Elements**

*Graphic Forms*

I chose to move away from common graphic forms for the first two data viz in my infographic, white the third data viz was made using a common graphic form.

-   Data Viz 1: A timeline made using ggplot's geom_segment, geom_point, geom_label, and geom_text to show nuclear accidents INES level 4 or higher over time.

-   Data Viz 2: A color bar to show radiation exposure by distance to the Chernobyl NPP. The bar was made primarily using geom_tile, geom_segment and geom_labels.

-   Data Viz 3: A graph showing 3 lakes near the NPP, normalized by the EPA's annual Cs-137 water contamination levels where the x-axis is distance to the NPP and the y-axis is the Cs-137 concentration normalized.

*Text*

I used text to point out the most important takeaways from each data viz and to provide context to each graph in the subtitle. Axis text was largely replaced by the labels and annotations I added to each graph to make the viewer consume only the most important data points.

*Themes*

I intentionally modified most non-data plot elements to be visually pleasing and to appeal to viewers' associations of neon colors, especially green, to radioactivity. I also incorporated glow to several plot elements - I made the timeline, data points and color bar outer borders glow using the ggfx package.

*Colors*

I chose three main colors to apply to all my data viz and infographic - deep pink, spring green, and deep sky blue. These colors are bright and neon-like and are meant to maintain the theme of radioactive glow. They also worked well with the effects of the ggfx package's function "with_outer_glow( )". Other than these two colors, all other elements and text were kept in black and white. I used black to create a sense of darkness and doom, as well as a futuristic-to-80s feel, in the infographic.

-   typography

-   general design (e.g. group order, spacing, text orientation, data-ink ratio, creating a visual hierarchy, avoiding information overload)

-   contextualizing your data

-   centering your primary message

-   considering accessibility (e.g. colorblind-friendly palettes / contrast, alt text)

-   applying a DEI lens to your design, as appropriate (e.g. considering the people / communities / places represented in your data, consider how you frame your questions / issue)

```{r message=FALSE}
# Load libraries 
library(here)
library(dplyr) 
library(ggplot2)
library(janitor)
library(png)
library(jpeg)
library(patchwork)
library(glue)
library(tidyverse)
library(htmltools)
library(ggrepel)
library(grid)
library(scales)
library(stringr)
library(lubridate)
library(ggimage)
library(ggfx)
library(scales)
library(gghighlight)
library(ggtext)
library(sysfonts)
library(magick)
library(showtext)
```

```{r}
# enable showtext 
showtext_auto()
```

```{r}
font_add_google(name = "Keania One", family = "ko")
font_add_google(name = "Smooch Sans", family = "ss")
```

```{r fig.width=40, fig.height=3}
main_title_1 <- ggplot() +
  annotate("text",
           x = 2,
           y = 2, 
           label = "NUCLEAR ENERGY PROMISES A BRIGHT FUTURE",
           family = "ko", 
           size = 40,
           color = "springgreen") +
  theme_void() +
  theme(plot.background = element_rect(fill = "black", 
                                   color = "black"))



ggsave("main_title_1.png",
       plot = main_title_1,
       device = "png",
       width = 5, 
       height = 1,
       units = "cm",
       dpi = 300
       )

# ---------------- main title 2

main_title_2 <- ggplot() +
  annotate("text",
           x = 2,
           y = 2, 
           label = "But Behind Its Reactor Doors Hides Impending Disaster",
           family = "ss", 
           size = 40,
           color = "white") +
  theme_void() +
  theme(plot.background = element_rect(fill = "black", 
                                   color = "black"))


ggsave("main_title_2.png",
       plot = main_title_2,
       device = "png",
       width = 5, 
       height = 1,
       units = "cm",
       dpi = 300
       )
```

```{r}
chernobyl_exposure <-read.csv(here("data","chernobyl_exposure_distance.csv")) %>%
  clean_names()

chernobyl_water <- read.csv(here("data","chernobyl_water_chem.csv")) %>%
  clean_names()

nuclear_accidents <- read.csv(here("data","nuclear_accidents.csv") ) %>%
  clean_names() 
```

```{r}
# drop NA's 
chernobyl_exposure <- chernobyl_exposure %>%
  filter(!is.na(exposure_dose_rate_m_r_h)) 

# find average absorbed doses at km intervals
km_intervals <- chernobyl_exposure %>%
  
  filter(distance_from_ch_npp_km %in% c(5,10, 20, 30, 50, 60)) %>%
  
  arrange(desc(absorbed_dose_rate_micro_gray_h)) %>%
  
  group_by(distance_from_ch_npp_km) %>%
  
  slice_head(n = 1) %>%
  
  filter(!distance_from_ch_npp_km == 20) %>%
  
  mutate(comparison = paste0(  # assuming 1 chest xray = 0.1 mGy
  
    "PEAK RADIATION DOSE: ", absorbed_dose_rate_micro_gray_h, " MGY / HR",
    "\nOR ", absorbed_dose_rate_micro_gray_h/0.1, " CHEST X-RAYS PER HR", sep = " ")) %>% 
  
  ungroup()


km_intervals$location <-c(-0.9,-0.9,-0.9,-0.9)

```

```{r}
deposition_conversion_factor <- 1000 # for kBq to Bq
bq_to_pci <- 27.027 # Bq to pCi conversion factor

# Calculate concentration and create one new column in the data frame
chernobyl_water$concentration_pci_l <- round((chernobyl_water$x137cs_deposition_k_bq_m2 * deposition_conversion_factor) * 
  (chernobyl_water$surface_km2 * 1e6) / (chernobyl_water$surface_km2 * 1e6 * chernobyl_water$max_depth_m * 1000) * bq_to_pci)

# normalize based on EPA annual limit (200pCi/L) to put into context
chernobyl_water$normalized <- round(chernobyl_water$concentration_pci_l/200)

## filter to the higher values
chernobyl_water <- chernobyl_water %>%
  filter(normalized > 50)
```

```{r}
# filter to INES levels of interest 
nuclear_accidents <- nuclear_accidents %>%
  filter(ines_level >= 4) %>% # filter to accidents of INES level 4-7
  filter(!is.na(ines_level)) %>%  # drop if ines_level = NA
  mutate(description = paste(incident, location, sep = ",\n "))


# make "date" col into date object, set "orders" to all possible date formats in the df
nuclear_accidents$date <- year(as.Date(parse_date_time(nuclear_accidents$date, orders =  c("m/d/Y","d/m/Y"))))

```

```{r}

# heights for milestones.
nuclear_accidents$positions <- c(0.13, -0.1, 0.09, -0.05, .05, -.1, .09, -.05, .05, -.05) 

# set the directions for each accident, aka above and below timeline
nuclear_accidents$directions <- c(1, -1) 

```

```{r fig.width=15, fig.height=12}

timeline <- ggplot(nuclear_accidents, aes(x = date, y = positions, label = description)) +
  theme_classic() +
  
  # horizontal timeline
  with_outer_glow(
    
    geom_hline(yintercept = 0,
             color = "springgreen",
             alpha = 0.9,
             linewidth = 5,
             show.legend = FALSE),
    
    colour = "springgreen",
    sigma = 2,
    expand = 3) +
  
  # lines connecting accident to timeline

   geom_segment(data = nuclear_accidents, aes(y = positions, yend = 0,xend = date),
                linewidth = .6,
                color = "white",
                linetype ="dashed") +
  
  # glowing orb for each accident indicating INES level, path of least resistance

  with_outer_glow( # nuclear accident 1 
  
  geom_point(data = nuclear_accidents, aes(x = date[1], y = positions[1]), size = 30, color = "#f80909"),
  
  sigma = 10,
  expand = 3,
  colour = "#f80909"
    
  ) +
  
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 2
  
  geom_point(data = nuclear_accidents, aes(x = date[2], y = positions[2]), size = 37, color = "darkorange"),
  
  sigma = 10,
  expand = 3,
  colour = "darkorange"
    
  ) +
  
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 3
  
  geom_point(data = nuclear_accidents, aes(x = date[3], y = positions[3]), size = 37, color = "gold"),
  
  sigma = 10,
  expand = 3,
  colour = "gold"
    
  ) +
  
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 4
  
  geom_point(data = nuclear_accidents, aes(x = date[4], y = positions[4]), size = 37, color = "gold"),
  
  sigma = 10,
  expand = 3,
  colour = "gold"
    
  ) +
  
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 5
  
  geom_point(data = nuclear_accidents, aes(x = date[5], y = positions[5]), size = 37, color = "gold"),
  
  sigma = 10,
  expand = 3,
  colour = "gold"
    
  ) +
  
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 6
  
  geom_point(data = nuclear_accidents, aes(x = date[6], y = positions[6]), size = 37, color = "gold"),
  
  sigma = 10,
  expand = 3,
  colour = "gold"
    
  ) +
  
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 7
  
  geom_point(data = nuclear_accidents, aes(x = date[7], y = positions[7]), size = 35, color = "darkorange"),
  
  sigma = 10,
  expand = 3,
  colour = "darkorange"
    
  ) +
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 8 
  
  geom_point(data = nuclear_accidents, aes(x = date[8], y = positions[8]), size = 30, color = "deeppink"),
  
  sigma = 10,
  expand = 3,
  colour = "deeppink"
    
  ) +
  
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 9
  
  geom_point(data = nuclear_accidents, aes(x = date[9], y = positions[9]), size = 37, color = "gold"),
  
  sigma = 10,
  expand = 3,
  colour = "gold"
    
  ) +
  # glowing orb for each accident indicating INES level 

  with_outer_glow( # nuclear accident 10
  
  geom_point(data = nuclear_accidents, aes(x = date[10], y = positions[10]), size = 30, color = "deeppink"),
  
  sigma = 10,
  expand = 3,
  colour = "deeppink"
    
  ) + 
  
  # year labels on timeline
  geom_label(aes(x = date, 
                label = date,
                y = 0),
             fill = "black",
             color = "white",
             family = "ss",
             size = 6,
             show.legend = FALSE) +
  
  # text boxes that are html friendly, accident description
  geom_textbox(aes(label = str_wrap(
    
    paste0("<b><span style='color:white;'>",incident,".</b>", tags$br(), location))),
    fill = "black",
    color = "white",
    size = 5,
    
    family = "ss",
    width = 0.2,
    halign = 0.5,
    valign = 0.5,
    show.legend = TRUE
              ) +
  
  # geom_point(data = nuclear_accidents, aes(x = date, y = positions), size = 20) +
  
  labs(title = "At a Glance: A History of Nuclear Accidents",
       subtitle = "Any engagement with nuclear technology carries incredibly high stakes, where the margin for error is razor-thin & the consequences far-reaching.") +
  
  
  theme(
        plot.title = element_text(family = "ko",
                                  margin = margin(t = 0, r = 0, b = 10 , l = 0, unit = "pt"),
                                  size = 30,
                                  color = "springgreen"),
        plot.subtitle = element_text(family = "ss",
                                     size = 20,
                                     color = "white",
                                     margin = margin(t = 0, r = 0, b = 30 , l = 0, unit = "pt")),
        plot.title.position = "plot",
        axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks = element_blank(),
        axis.title.x = element_blank(),
        legend.position = "none",
        axis.line.x = element_blank(),
        panel.background = element_rect(fill = "black",
                                        color = "black"),
        plot.background = element_rect(fill = "black",
                                       color = "black"),
        plot.margin = margin(t = 70, r = 100, b = 70, l = 100, unit = "pt")) +
  
  
   coord_cartesian(clip = "off")

ggsave("timeline.png",
       plot = timeline,
       device = "png",
       width = 15, 
       height = 12,
       units = "cm",
       dpi = 300
       )

timeline 

```

```{r}
# save power plant image path + warning sign path
plant_path <- here("samples", "design.png")

warning_path <- here("samples","warning.png")

# read as PNG
plant <- readPNG(plant_path, native = FALSE)

warning <- readPNG(warning_path, native = FALSE)

# turn to raster grob
plant_grob <- rasterGrob(plant,
                         width = unit(2.5, "cm"), 
                         height = unit(2.5,"cm"),
                         x = unit(0, "npc"),  
                         y = unit(0, "npc"), 
                         just = c("left", "center")) 
                    

warning_grob <- rasterGrob(warning,
                         width = unit(1, "cm"), 
                         x = unit(0, "npc"),  
                         y = unit(0, "npc"), 
                         just = c("left", "center")) 
                    
```

```{r}
# make main plot
exposure<- ggplot(chernobyl_exposure, aes(
  y = 0.5,  
  x = distance_from_ch_npp_km,
  fill = absorbed_dose_rate_micro_gray_h
)) +
  
  with_outer_glow(
    
    geom_tile(width = 7.5, height = 0.7, color = "white", show.legend = FALSE),
                  sigma = 2,
                  expand = 8,
                  colour = "springgreen"
    
                  ) +  
    
  scale_fill_gradientn(
    
    colours = c("springgreen", "deeppink", "firebrick2"),
    name = "Absorbed Dose Rate\n(mGy/h)",
    transform = "sqrt"
    
  ) +
  
 scale_x_continuous(
   breaks = seq(0, 60, by = 15),
  labels = paste0(seq(0, 60, by = 15), " km"),
  minor_breaks = seq(0, 60, by = 7.5)
  ) +

  labs(
    
    title = "Radiation Exposure By Proximity To Chernobyl Nuclear Power Plant (NPP)",
    
    subtitle = "According to measurements taken between January 1987 & June 1987 (approximately one year after the accident),\nthe radiation levels 5km away from the power plant were still so high that spending 24 hrs there would likely be lethal.",
    
    x = NULL,
    
    y = NULL,
    
    caption = "Source: CDC, EPA, and Data.Gov.UK Find Open Data."
  ) +

  
  theme(
    plot.background = element_rect(fill = "black", color = NA),
    panel.background = element_rect(fill = "black", color = NA),
    panel.grid = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text = element_blank(),
    axis.title.x = element_blank(),
    axis.line = element_blank(),
    plot.title.position = "plot",
    plot.caption.position = "plot",
    plot.caption = element_text(family = "ss",
                                color = "white",
                                size = 15,
                                hjust = 0,
                                face = "italic"),
    
    plot.title = element_text(
      color = "springgreen", 
      size = 30, 
      family = "ko",
      margin = margin(t = 10, r = 0, l = 0, unit = "pt")
    ),
    
    plot.subtitle = element_text(
    color = "white", 
      size = 20, 
      family = "ss",
      margin = margin(t = 10, r = 0, l = 0, unit = "pt")
    ),
    
    plot.margin = margin(t = 50, r = 20, b = 100, l = 50, unit = "pt")
    
  ) +
  
  coord_cartesian(clip = "off", ylim = c(-1.8, 1.5), xlim = c(0,65))

```

```{r fig.width=25, fig.height=10}
exposure_annotated <- exposure + 
  
    annotation_custom(  
    
    plant_grob,
    xmin = -3,  
    xmax = 7,   
    ymin = 0.6,  
    ymax = 1.8) +
  
  
    annotate( 
    "text",
    x = -2,
    y = -0.1,
    size = 6,
    label = "0 KM",
    family = "ko",
    color = "white"
    ) +
  
  
  geom_segment(
    aes(
    x = 2.4, xend = 63, y = 0.5, yend = 0.5),  
    size = 20, 
    color = "gray30", 
    lineend = "square"
    
  ) +
  
  geom_segment(
    
    aes(x = 2.4, xend = 61, y = 0.5, yend = 0.5),
    linetype = "dashed",
    color = "gold2",
    size = 2
    
  ) +
  
  geom_curve(
  data = km_intervals,
  aes(
    x = distance_from_ch_npp_km - 3.5,
    y = -0.5,
    xend = distance_from_ch_npp_km - 3.75,
    yend = 0.1
  ),
  curvature = -0.3, 
  color = "white",
  size = 0.7,
  arrow = arrow(length = unit(0.25, "cm"), type = "closed")
) +

  
  geom_label(data = km_intervals, 
  aes( # data on each km interval
    x = distance_from_ch_npp_km - 4,
    y =  location,
    label = paste0(
    absorbed_dose_rate_micro_gray_h / 0.1, " Chest X-Rays/Hr", sep ="")), 
  color = "white",
  fill = "black",
  size = 6,
  hjust = 0,
  nudge_x = c(-3,-0.3,-0.3,-0.3),
  inherit.aes = FALSE,
  family = "ss") +
  
  with_outer_glow(
    
    annotation_custom(  # warning sign for 5km mark
    
    warning_grob,
    xmin = km_intervals$distance_from_ch_npp_km[1] - 4,  
    xmax = km_intervals$distance_from_ch_npp_km[1] - 4,   
    ymin = 0.5,  
    ymax = 0.7
  ),
  
  sigma = 2,
  expand = 2, 
  colour = "springgreen"
  ) +
  
  with_outer_glow(
    
    annotation_custom(  # warning sign for 10km mark
    
    warning_grob,
    xmin = km_intervals$distance_from_ch_npp_km[2] - 4,  
    xmax = km_intervals$distance_from_ch_npp_km[2] - 4,   
    ymin = 0.5,  
    ymax = 0.7
    
  ),

   sigma = 2,
  expand = 2, 
  colour = "springgreen"
  )+
  
  with_outer_glow(
    
    annotation_custom(  # warning sign for 30km mark
    
    warning_grob,
    xmin = km_intervals$distance_from_ch_npp_km[3] - 4,  
    xmax = km_intervals$distance_from_ch_npp_km[3] - 4,   
    ymin = 0.5,  
    ymax = 0.7
    
  ),
  
   sigma = 2,
  expand = 2, 
  colour = "springgreen"
  )+
  
   with_outer_glow( 
     
    annotation_custom(  # warning sign for 60km mark
    warning_grob,
    xmin = km_intervals$distance_from_ch_npp_km[4] - 4,  
    xmax = km_intervals$distance_from_ch_npp_km[4] - 4,   
    ymin = 0.5,  
    ymax = 0.7
    
  ),
  
   sigma = 2,
  expand = 2, 
  colour = "springgreen"
   ) +
  
  geom_text(data = km_intervals,  # km markers
  aes(x = distance_from_ch_npp_km - 2.75, y = -0.65, 
  label = paste0(distance_from_ch_npp_km, "KM", sep = " ")), 
  color = "white", 
  family = "ko",
  size = 6)


ggsave("exposure_annotated.png",
       plot = exposure_annotated,
       device = "png",
       width = 25, 
       height = 10,
       units = "cm",
       dpi = 300
       )

exposure_annotated
```

```{r}
wave_data <- data.frame(
  x = seq(0, 15, length.out = 100),
  y = 6 * sin(seq(0, 10 * pi, length.out = 100)) + 5  
)

wave_segments <- wave_data %>%
  mutate(
    xend = lead(x),
    yend = lead(y)
  ) %>%
  filter(!is.na(xend))
```

```{r fig.width= 16, fig.height=9}

water <- ggplot(chernobyl_water, aes(x = distance_from_cnpp_km, y = normalized)) +
  
  geom_segment(aes(x = distance_from_cnpp_km,
                   y = 0,
                   yend = normalized),
               color = "white",
               linetype = "dashed") +
  
  geom_segment(
    data = wave_segments,
    aes(x = x, y = y, xend = xend, yend = yend),
    color = "deepskyblue",
    size = 1.2
  ) +
  
# lakes as points
  with_outer_glow(
    geom_point(aes(x = distance_from_cnpp_km,
                   y = normalized,
                   size = 30), 
               color = "springgreen",
               show.legend = FALSE,
               stroke = 4),
    colour = "deeppink",
    sigma = 3,
    expand = 5
  ) + 
    
# arrows pointing to each point
    geom_curve(
    aes(x = distance_from_cnpp_km + 2,  
        y = normalized - 6.5,    
        xend = distance_from_cnpp_km + 0.1,     
        yend = normalized + 10),            
    color = "springgreen",              
    curvature = 0.4,                   
    arrow = arrow(type = "closed", length = unit(0.1, "inches")), 
    size = 0.7                       
  ) +
  
  # lake names
  annotate("text",
           x = .7,
           y = 144,
           label = "Lake Glubokoye",
           family = "ss",
           color = "white",
           size = 5) +
    annotate("text",
           x = 1.5,
           y = 230,
           label = "Lake Yanovsky",
           family = "ss",
           color = "white",
           size = 5) +
      annotate("text",
           x = 8.75,
           y = 287,
           label = "Power Plant's Cooling Pond",
           family = "ss",
           color = "white",
           size = 5) +
  
  
  geom_label(aes(x = distance_from_cnpp_km,
                   y = normalized,
             label = paste0(normalized,"x ","the EPA'S annual max level of Cs-137\n contamination in drinking water")),
             family = "ss",
             fontface = "plain",
             size = 5,
             fill = "black",
             color = "white",
             nudge_x = 2,
             nudge_y = -7.5) +

  
  scale_x_continuous(limits = c(0,15),
                     expand = c(0,0),
                     breaks = c(0,1.5,2.3,10,15),
                     labels = c("Chernobyl NPP","1.5 KM","2.5 KM", "10 KM", "15 KM")) +
  
  labs(
    title = "Dangerously High Cesium-137 Water Concentration\nLevels in Lakes Near The Accident 28 Years Later",
    subtitle = "Water Samples From 3 Lakes Near Chernobyl NPP Show Dangerous Cesium-137 Water Contamination Levels, Relative to the EPA's Max ANNUAL Limit",
    x = "Distance from Chernobyl NPP (km)"
    # y = "Relavtive Cs-137 Water Concentration (pCi/L divided by 200 pCi/L)"
  ) +

  theme(
    plot.background = element_rect(fill = "black", color = NA),
    panel.background = element_rect(fill = "black", color = NA),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.line.x = element_line(color = "white"),
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.ticks.x = element_line(color = "white", size = 0.5),
    axis.title = element_text(color = "white", size = 14, family = "ss"),
    axis.text.x = element_text(color = "white", size = 15, family = "ss"),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    plot.title = element_text(color = "springgreen", size = 20, family = "ko",
                              margin = margin(t = 20, r = 0, b = 20, l = 0, "pt")),
    plot.subtitle = element_text(color = "white", size = 18, family = "ss",
                                 margin = margin(t = 0, r = 0, b = 20, l = 0, "pt")),
    
    plot.margin = margin(t = 30, r = 70, b = 50, l = 70, "pt")
  ) 


water

ggsave("water.png",
       plot = water,
       device = "png",
       width = 18, 
       height = 12,
       units = "cm",
       dpi = 300
       )
```
